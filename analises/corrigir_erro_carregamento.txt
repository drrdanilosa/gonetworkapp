// app/api/briefings/[eventId]/route.ts
import { NextRequest, NextResponse } from 'next/server'
import fs from 'fs/promises'
import path from 'path'
import { v4 as uuidv4 } from 'uuid'

const DATA_FILE = path.join(process.cwd(), 'data', 'briefings.json')
const EVENTS_FILE = path.join(process.cwd(), 'data', 'events.json')

// Função auxiliar para ler dados de briefing
async function readBriefingData() {
  try {
    const dir = path.dirname(DATA_FILE)
    await fs.mkdir(dir, { recursive: true })
    
    try {
      const data = await fs.readFile(DATA_FILE, 'utf-8')
      return JSON.parse(data)
    } catch (error) {
      // Se o arquivo não existir, retorna objeto vazio
      return {}
    }
  } catch (error) {
    console.error('Erro ao ler dados de briefing:', error)
    return {}
  }
}

// Função auxiliar para ler dados de eventos
async function readEventsData() {
  try {
    const dir = path.dirname(EVENTS_FILE)
    await fs.mkdir(dir, { recursive: true })
    
    try {
      const data = await fs.readFile(EVENTS_FILE, 'utf-8')
      return JSON.parse(data)
    } catch (error) {
      // Se o arquivo não existir, retorna array vazio
      return []
    }
  } catch (error) {
    console.error('Erro ao ler dados de eventos:', error)
    return []
  }
}

// Função auxiliar para salvar dados de briefing
async function saveBriefingData(data: Record<string, any>) {
  try {
    const dir = path.dirname(DATA_FILE)
    await fs.mkdir(dir, { recursive: true })
    await fs.writeFile(DATA_FILE, JSON.stringify(data, null, 2))
  } catch (error) {
    console.error('Erro ao salvar dados de briefing:', error)
    throw error
  }
}

// Função para validar se o evento existe
async function validateEventExists(eventId: string): Promise<boolean> {
  try {
    const events = await readEventsData()
    return events.some((event: any) => event.id === eventId)
  } catch (error) {
    console.error('Erro ao validar evento:', error)
    return false
  }
}

// Interface para o Briefing
interface BriefingData {
  id: string
  eventId: string
  projectName?: string
  client?: string
  briefingDate?: string
  eventDate?: string
  location?: string
  description?: string
  objectives?: string[]
  targetAudience?: string
  budget?: number
  specialRequirements?: string
  team?: any[]
  editorialInfo?: any
  deliveries?: any[]
  timeline?: any[]
  createdAt: string
  updatedAt: string
  [key: string]: any
}

/**
 * GET - Buscar briefing de um evento específico
 */
export async function GET(
  request: NextRequest,
  { params }: { params: { eventId: string } }
) {
  try {
    const { eventId } = params
    
    if (!eventId) {
      return NextResponse.json(
        { error: 'ID do evento é obrigatório' },
        { status: 400 }
      )
    }

    // Validar se o evento existe
    const eventExists = await validateEventExists(eventId)
    if (!eventExists) {
      return NextResponse.json(
        { 
          error: 'Evento não encontrado',
          eventId 
        },
        { status: 404 }
      )
    }
    
    const briefingData = await readBriefingData()
    const briefing = briefingData[eventId]
    
    if (!briefing) {
      // Retornar estrutura vazia se briefing não existe, mas evento existe
      const emptyBriefing: Partial<BriefingData> = {
        eventId,
        id: null,
        createdAt: null,
        updatedAt: null
      }
      
      return NextResponse.json(
        { 
          message: 'Briefing não encontrado para este evento',
          eventId,
          briefing: emptyBriefing
        },
        { status: 200 }
      )
    }
    
    console.log(`[GET /api/briefings/${eventId}] Briefing encontrado`)
    return NextResponse.json({ briefing }, { status: 200 })
  } catch (error) {
    console.error('Erro ao buscar briefing:', error)
    return NextResponse.json(
      { 
        error: 'Erro ao processar requisição',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    )
  }
}

/**
 * POST - Criar ou atualizar briefing de um evento
 */
export async function POST(
  request: NextRequest,
  { params }: { params: { eventId: string } }
) {
  try {
    const { eventId } = params
    const data = await request.json()

    if (!eventId) {
      return NextResponse.json(
        { error: 'ID do evento é obrigatório' },
        { status: 400 }
      )
    }

    // Validar se o evento existe
    const eventExists = await validateEventExists(eventId)
    if (!eventExists) {
      return NextResponse.json(
        { 
          success: false,
          error: 'Evento não encontrado. Certifique-se de que o evento foi criado primeiro.',
          eventId 
        },
        { status: 404 }
      )
    }

    // Validar dados mínimos
    if (!data || Object.keys(data).length === 0) {
      return NextResponse.json(
        {
          success: false,
          error: 'Dados do briefing não fornecidos',
        },
        { status: 400 }
      )
    }

    // Ler dados existentes
    const briefingData = await readBriefingData()
    const existingBriefing = briefingData[eventId]
    
    // Preparar objeto do briefing
    const now = new Date().toISOString()
    const briefingRecord: BriefingData = {
      id: existingBriefing?.id || data.id || uuidv4(),
      eventId,
      ...data,
      createdAt: existingBriefing?.createdAt || now,
      updatedAt: now,
    }

    // Salvar briefing atualizado
    briefingData[eventId] = briefingRecord
    await saveBriefingData(briefingData)

    console.log(`[POST /api/briefings/${eventId}] Briefing ${existingBriefing ? 'atualizado' : 'criado'}`)

    return NextResponse.json(
      {
        success: true,
        message: `Briefing ${existingBriefing ? 'atualizado' : 'criado'} com sucesso`,
        eventId,
        briefing: briefingRecord,
      },
      { status: existingBriefing ? 200 : 201 }
    )
  } catch (error) {
    console.error('Erro ao salvar briefing:', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Erro interno ao salvar briefing',
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    )
  }
}

/**
 * PUT - Atualizar briefing completo (substitui dados existentes)
 */
export async function PUT(
  request: NextRequest,
  { params }: { params: { eventId: string } }
) {
  try {
    const { eventId } = params
    const data = await request.json()

    if (!eventId) {
      return NextResponse.json(
        { error: 'ID do evento é obrigatório' },
        { status: 400 }
      )
    }

    // Validar se o evento existe
    const eventExists = await validateEventExists(eventId)
    if (!eventExists) {
      return NextResponse.json(
        { 
          success: false,
          error: 'Evento não encontrado',
          eventId 
        },
        { status: 404 }
      )
    }

    // Ler dados existentes
    const briefingData = await readBriefingData()
    const existingBriefing = briefingData[eventId]
    
    if (!existingBriefing) {
      return NextResponse.json(
        {
          success: false,
          error: 'Briefing não encontrado para atualização',
        },
        { status: 404 }
      )
    }

    // Substituir dados completamente (manter apenas id, eventId, createdAt)
    const now = new Date().toISOString()
    const briefingRecord: BriefingData = {
      id: existingBriefing.id,
      eventId,
      ...data,
      createdAt: existingBriefing.createdAt,
      updatedAt: now,
    }

    briefingData[eventId] = briefingRecord
    await saveBriefingData(briefingData)

    console.log(`[PUT /api/briefings/${eventId}] Briefing substituído completamente`)

    return NextResponse.json(
      {
        success: true,
        message: 'Briefing atualizado completamente com sucesso',
        eventId,
        briefing: briefingRecord,
      },
      { status: 200 }
    )
  } catch (error) {
    console.error('Erro ao atualizar briefing:', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Erro interno ao atualizar briefing',
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    )
  }
}

/**
 * PATCH - Atualizar parcialmente o briefing (merge com dados existentes)
 */
export async function PATCH(
  request: NextRequest,
  { params }: { params: { eventId: string } }
) {
  try {
    const { eventId } = params
    const updates = await request.json()

    if (!eventId) {
      return NextResponse.json(
        { error: 'ID do evento é obrigatório' },
        { status: 400 }
      )
    }

    // Validar se o evento existe
    const eventExists = await validateEventExists(eventId)
    if (!eventExists) {
      return NextResponse.json(
        { 
          success: false,
          error: 'Evento não encontrado',
          eventId 
        },
        { status: 404 }
      )
    }

    // Ler dados existentes
    const briefingData = await readBriefingData()
    const existingBriefing = briefingData[eventId]
    
    if (!existingBriefing) {
      return NextResponse.json(
        {
          success: false,
          error: 'Briefing não encontrado para atualização',
        },
        { status: 404 }
      )
    }

    // Fazer merge dos dados (preservar dados existentes)
    const now = new Date().toISOString()
    const briefingRecord: BriefingData = {
      ...existingBriefing,
      ...updates,
      id: existingBriefing.id, // Não permitir alterar ID
      eventId, // Garantir consistência
      createdAt: existingBriefing.createdAt, // Preservar data de criação
      updatedAt: now,
    }

    briefingData[eventId] = briefingRecord
    await saveBriefingData(briefingData)

    console.log(`[PATCH /api/briefings/${eventId}] Briefing atualizado parcialmente`)

    return NextResponse.json(
      {
        success: true,
        message: 'Briefing atualizado parcialmente com sucesso',
        eventId,
        briefing: briefingRecord,
        updatedFields: Object.keys(updates),
      },
      { status: 200 }
    )
  } catch (error) {
    console.error('Erro ao atualizar briefing parcialmente:', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Erro interno ao atualizar briefing',
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    )
  }
}

/**
 * DELETE - Remover briefing de um evento
 */
export async function DELETE(
  request: NextRequest,
  { params }: { params: { eventId: string } }
) {
  try {
    const { eventId } = params

    if (!eventId) {
      return NextResponse.json(
        { error: 'ID do evento é obrigatório' },
        { status: 400 }
      )
    }

    // Ler dados existentes
    const briefingData = await readBriefingData()
    const existingBriefing = briefingData[eventId]
    
    if (!existingBriefing) {
      return NextResponse.json(
        {
          success: false,
          error: 'Briefing não encontrado para remoção',
        },
        { status: 404 }
      )
    }

    // Remover o briefing
    delete briefingData[eventId]
    await saveBriefingData(briefingData)

    console.log(`[DELETE /api/briefings/${eventId}] Briefing removido`)

    return NextResponse.json(
      {
        success: true,
        message: 'Briefing removido com sucesso',
        eventId,
        deletedBriefing: {
          id: existingBriefing.id,
          createdAt: existingBriefing.createdAt,
          updatedAt: existingBriefing.updatedAt
        }
      },
      { status: 200 }
    )
  } catch (error) {
    console.error('Erro ao remover briefing:', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Erro interno ao remover briefing',
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    )
  }
}









Agora vou criar também uma API route para listar todos os eventos disponíveis, que provavelmente está faltando e é necessária para o carregamento dos eventos na aba briefing:


// app/api/events/route.ts
import { NextRequest, NextResponse } from 'next/server'
import fs from 'fs/promises'
import path from 'path'

const EVENTS_FILE = path.join(process.cwd(), 'data', 'events.json')

// Função auxiliar para ler dados de eventos
async function readEventsData() {
  try {
    const dir = path.dirname(EVENTS_FILE)
    await fs.mkdir(dir, { recursive: true })
    
    try {
      const data = await fs.readFile(EVENTS_FILE, 'utf-8')
      const events = JSON.parse(data)
      return Array.isArray(events) ? events : []
    } catch (error) {
      // Se o arquivo não existir, retorna array vazio
      return []
    }
  } catch (error) {
    console.error('Erro ao ler dados de eventos:', error)
    return []
  }
}

/**
 * GET - Listar todos os eventos disponíveis
 */
export async function GET(request: NextRequest) {
  try {
    const events = await readEventsData()
    
    console.log(`[GET /api/events] ${events.length} eventos encontrados`)
    
    return NextResponse.json(
      {
        success: true,
        events,
        total: events.length
      },
      { status: 200 }
    )
  } catch (error) {
    console.error('Erro ao buscar eventos:', error)
    return NextResponse.json(
      { 
        success: false,
        error: 'Erro ao processar requisição',
        details: error instanceof Error ? error.message : String(error),
        events: []
      },
      { status: 500 }
    )
  }
}

// app/api/events/[eventId]/route.ts
// Função auxiliar para salvar dados de eventos
async function saveEventsData(events: any[]) {
  try {
    const dir = path.dirname(EVENTS_FILE)
    await fs.mkdir(dir, { recursive: true })
    await fs.writeFile(EVENTS_FILE, JSON.stringify(events, null, 2))
  } catch (error) {
    console.error('Erro ao salvar dados de eventos:', error)
    throw error
  }
}

/**
 * POST - Criar um novo evento
 */
export async function POST(request: NextRequest) {
  try {
    const eventData = await request.json()
    
    if (!eventData || !eventData.name) {
      return NextResponse.json(
        { 
          success: false,
          error: 'Nome do evento é obrigatório' 
        },
        { status: 400 }
      )
    }

    const events = await readEventsData()
    
    // Gerar ID único se não fornecido
    const newEvent = {
      id: eventData.id || Date.now().toString(),
      name: eventData.name,
      description: eventData.description || '',
      date: eventData.date || '',
      location: eventData.location || '',
      status: eventData.status || 'planning',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      ...eventData
    }

    events.push(newEvent)
    await saveEventsData(events)

    console.log(`[POST /api/events] Novo evento criado: ${newEvent.name}`)

    return NextResponse.json(
      {
        success: true,
        message: 'Evento criado com sucesso',
        event: newEvent
      },
      { status: 201 }
    )
  } catch (error) {
    console.error('Erro ao criar evento:', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Erro interno ao criar evento',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    )
  }
}









Problemas Identificados e Correções Aplicadas:
1. Validação de Eventos

Problema: O código original não verificava se o evento existe antes de criar/editar o briefing
Correção: Adicionei função validateEventExists() que verifica se o evento existe no arquivo de eventos

2. Tratamento de Briefing Não Encontrado

Problema: Retornava erro 404 quando briefing não existia, mesmo que o evento existisse
Correção: No GET, agora retorna uma estrutura vazia quando o briefing não existe mas o evento sim

3. API de Eventos Faltando

Problema: Provavelmente não existe uma API para listar eventos
Correção: Criei app/api/events/route.ts para listar e criar eventos

4. Estrutura de Resposta

Problema: Inconsistência na estrutura de resposta
Correção: Padronizei as respostas com { success, message, data }

5. Campos Timeline

Correção: Adicionei campo timeline na interface para suportar a geração automática da timeline

Arquivos Adicionais Necessários:
Você também precisa criar estas APIs complementares:

app/api/events/[eventId]/route.ts - Para buscar, atualizar e deletar eventos específicos
app/api/timeline/[eventId]/route.ts - Para gerar timeline automaticamente baseada no briefing

Possíveis Causas do Problema de Carregamento:

Frontend não está fazendo a chamada correta para /api/events
Arquivo data/events.json não existe ou está vazio
CORS ou problemas de permissão nos arquivos de dados
Frontend está esperando estrutura diferente de resposta da API

Para resolver completamente, você precisaria também verificar:

O código do frontend da aba briefing
Se os diretórios data/ existem e têm permissões corretas
Se as chamadas de API estão sendo feitas corretamente no frontend


Sugestões de melhorias
1. Segurança e validação

    Adicionar validação mais robusta dos campos de entrada
    Implementar sanitização de dados para evitar injeções

2. Consistência com o resto da aplicação

    Verificar se a estrutura de dados do briefing (BriefingData) está alinhada com o modelo usado no frontend
    Garantir que os campos team, editorialInfo, deliveries e timeline correspondam ao que o frontend espera

3. Tratamento de concorrência

    Em um ambiente multiusuário, o acesso simultâneo aos arquivos JSON pode causar problemas
    Considerar implementar um mecanismo simples de bloqueio (lock)
